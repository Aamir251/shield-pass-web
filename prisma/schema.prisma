// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type EncryptedKey {
  data   String
  salt  String
  iv    String
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]


  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  SharedCredential    SharedCredential[]
  Credential          Credential[]

  sharedPublicKey     String

  sharedPrivateKey    EncryptedKey   // This encrypted format is created client-side using algorithm depended on privateKeyPair & Master Password

  encryptionKeyMain   EncryptedKey

  encryptionKeyRecovery EncryptedKey

}

type CredentialPassword {
  iv    String
  data  String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SharedCredential {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  credential    Credential @relation(fields: [credentialId], references: [id])
  credentialId  String     @db.ObjectId

  ownerId       String @db.ObjectId

  recipient     User   @relation(fields: [recipientId], references: [id])
  recipientId   String @db.ObjectId

  password      String

  @@unique([ ownerId, recipientId, credentialId ])
}



model Credential {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String
  email      String
  category   String
  websiteUrl String

  password   CredentialPassword

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SharedCredential SharedCredential[]
}

// Optional for WebAuthn support
